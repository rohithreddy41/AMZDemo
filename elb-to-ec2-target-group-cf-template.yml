

AWSTemplateFormatVersion: 2010-09-09
#serverless
Transform: 'AWS::Serverless-2016-10-31'
Description: Creates a VPC and a ELB with a EC2 Target Group Associated


Mappings:

    RegionToAmazonAMI:
        us-east-1:
            HVM64: ami-09479453c5cde9639

    NetworkToSubnet:
        "10.0.0.0":
            PubSubnetZoneA: "10.0.10.0/24"
            PubSubnetZoneB: "10.0.30.0/24"

Resources:

    # VPC
    VPC:
        Type: 'AWS::EC2::VPC'
        Properties:
            CidrBlock:
                'Fn::Join': [ '/', [ '10.0.0.0', '16' ] ]
            EnableDnsSupport: true
            EnableDnsHostnames: true
            InstanceTenancy: 'default'
            Tags:
                - Key: 'Name'
                  Value:
                      Ref: 'AWS::StackName'

    # Internet access
    PubSubnetZoneA:
        Type: 'AWS::EC2::Subnet'
        Properties:
            AvailabilityZone:
                Fn::Select:
                - '0'
                - Fn::GetAZs:
                    Ref: 'AWS::Region'
            CidrBlock:
                Fn::FindInMap:
                - NetworkToSubnet
                - '10.0.0.0'
                - PubSubnetZoneA
            MapPublicIpOnLaunch: 'True'
            VpcId:
                Ref: 'VPC'
            Tags:
                - Key: 'Name'
                  Value:
                      'Fn::Join': [ ':', [ 'Public', 'Zone A', !Ref 'AWS::StackName' ] ]


    # Internet access zoneB
    PubSubnetZoneB:
        Type: 'AWS::EC2::Subnet'
        Properties:
            AvailabilityZone:
                Fn::Select:
                - '1'
                - Fn::GetAZs:
                    Ref: 'AWS::Region'
            CidrBlock:
                Fn::FindInMap:
                - NetworkToSubnet
                - '10.0.0.0'
                - PubSubnetZoneB
            MapPublicIpOnLaunch: 'True'
            VpcId:
                Ref: 'VPC'
            Tags:
                - Key: 'Name'
                  Value:
                      'Fn::Join': [ ':', [ 'Public', 'Zone B', !Ref 'AWS::StackName' ] ]


    # Gateway to the internet
    InternetGateway:
        Type: 'AWS::EC2::InternetGateway'
        Properties:
            Tags:
                - Key: 'Name'
                  Value:
                      Ref: 'AWS::StackName'

    # Associate the gateway to the VPC
    GatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId:
                Ref: 'InternetGateway'
            VpcId:
                Ref: 'VPC'

    # Routing table for the public subnet in availability zone A
    RouteTablePubZoneA:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId:
                Ref: 'VPC'
            Tags:
                - Key: 'Name'
                  Value:
                      'Fn::Join': [ ':', [ 'Public', 'Zone A', !Ref 'AWS::StackName' ] ]

    # Routing table for the public subnet in availability zone B
    RouteTablePubZoneB:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId:
                Ref: 'VPC'
            Tags:
                - Key: 'Name'
                  Value:
                      'Fn::Join': [ ':', [ 'Public', 'Zone B', !Ref 'AWS::StackName' ] ]

    # Route traffic through the internet gateway
    RoutePubZoneA:
        DependsOn:
            - InternetGateway
        Type: AWS::EC2::Route
        Properties:
            DestinationCidrBlock: '0.0.0.0/0'
            GatewayId:
                Ref: 'InternetGateway'
            RouteTableId:
                Ref: 'RouteTablePubZoneA'

    # Route traffic through the internet gateway
    RoutePubZoneB:
        DependsOn:
            - InternetGateway
        Type: AWS::EC2::Route
        Properties:
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId:
                Ref: 'InternetGateway'
            RouteTableId:
                Ref: 'RouteTablePubZoneB'

    # Associate public subnet to its routing table
    RouteAssociationPubSubnetZoneA:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId:
                Ref: 'PubSubnetZoneA'
            RouteTableId:
                Ref: 'RouteTablePubZoneA'

    # Associate public subnet to its routing table
    RouteAssociationPubSubnetZoneB:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId:
                Ref: 'PubSubnetZoneB'
            RouteTableId:
                Ref: 'RouteTablePubZoneB'


    # EC2 Security Group Allowing Port 22 and 80 from anywhere
    EC2SecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: 'SSH and Port 80'
            VpcId:
              Ref: VPC
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 22
                  ToPort: 22
                  CidrIp: 0.0.0.0/0
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  SourceSecurityGroupId:
                      Ref: ELBSecurityGroup

    # ELB Security Group allowing Port 80 from anywhere
    ELBSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: 'SSH and Port 80'
            VpcId:
              Ref: VPC
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0

    # Linux Instance running on zone A with Apache running on Port 80
    AmazonLinuxInstanceZoneA:
      Type: AWS::EC2::Instance
      Properties:
        ImageId:
          Fn::FindInMap:
            - RegionToAmazonAMI
            - Ref: 'AWS::Region'
            - HVM64
        InstanceInitiatedShutdownBehavior: stop
        InstanceType: t2.nano
        Monitoring: 'true'
        NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          GroupSet:
          - !Ref EC2SecurityGroup
          SubnetId:
            Ref: PubSubnetZoneA
        Tenancy: default
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            cd /tmp
            yum update -y
            yum install -y httpd24
            echo "EC2 launched in PubSubnetZoneA" > /var/www/html/index.html
            service httpd start
            /opt/aws/bin/cfn-signal \
              -e $? \
              --stack ${AWS::StackName} \
              --resource AmazonLinuxInstanceZoneA \
              --region ${AWS::Region}

      #Instance in ZoneB
    AmazonLinuxIntanceZoneB:
        Type: AWS::EC2::Instance
        Properties:
          ImageId:
            Fn::FindInMap:
              - RegionToAmazonAMI
              - Ref: 'AWS::Region'
              - HVM64
          InstanceInitiatedShutdownBehavior: stop
          InstanceType: t2.nano
          Monitoring: 'true'
          NetworkInterfaces:
            - AssociatePublicIpAddress: 'true'
              DeviceIndex: '0'
              GroupSet:
                - !Ref EC2SecurityGroup
              SubnetId:
                Ref: PubSubnetZoneB
          Tenancy: default
          UserData:
            Fn::Base64: !Sub |
              #!/bin/bash -xe
              cd /tmp
              yum update -y
              yum install -y httpd24
              echo "EC2 launched in PubSubnetZoneB" > /var/www/html/index.html
              service httpd start
              /opt/aws/bin/cfn-signal \
                -e $? \
                --stack ${AWS::StackName} \
                --resource PubSubnetZoneB \
                --region ${AWS::Region}

    # Target Group
    EC2TargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        HealthCheckIntervalSeconds: 30
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 15
        HealthyThresholdCount: 5
        Matcher:
          HttpCode: '200'
        Name: EC2TargetGroup
        Port: 80
        Protocol: HTTP
        TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
        Targets:
        - Id:
            Ref: AmazonLinuxInstanceZoneA
        - Id:
            Ref: AmazonLinuxIntanceZoneB
          Port: 80
        UnhealthyThresholdCount: 3
        VpcId:
          Ref: 'VPC'
        Tags:
        - Key: Name
          Value: EC2TargetGroup
        - Key: Port
          Value: 80

    #ELB (ALB)
    ALBListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
          - Type: forward
            TargetGroupArn:
              Ref: EC2TargetGroup
        LoadBalancerArn:
            Ref: ApplicationLoadBalancer
        Port: 80
        Protocol: HTTP
    ApplicationLoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Scheme: internet-facing # or internal
        Subnets:
        - Ref: PubSubnetZoneA
        - Ref: PubSubnetZoneB
        SecurityGroups:
        - Ref: ELBSecurityGroup

      #VPC FLOW LOG
    FlowLog:
      Type: AWS::EC2::FlowLog
      Properties:
        DeliverLogsPermissionArn: 'arn:aws:iam::909667553559:role/flowlogsRole'
        LogDestinationType: 'cloud-watch-logs'
        LogGroupName: 'EC2FlowLogGroup'
        ResourceId:
          Ref: 'PubSubnetZoneA'
        ResourceType: 'Subnet'
        TrafficType: 'ALL'

    CleanUpdLambdaFunction:
      Type: AWS::Serverless::Function
      Properties:
        FunctionName: CleanUpAfterCFFunction
        CodeUri: s3://amzdemo541/Serverless-1.0-SNAPSHOT.jar
        Handler: com.amzdemo.serverless.LambdaHandler::handleRequest
        Runtime: java8
        Description: Java function
        MemorySize: 512
        Timeout: 10

    CloudWatchEventsRuleToCleanUpLogStreams:
      Type: AWS::Events::Rule
      Properties:
        EventPattern: {
          "source": ["aws.ec2"],
          "detail-type": ["EC2 Instance State-change Notification"],
          "detail": {
            "state": ["terminated"]
            "instance-id": ["Ref" :  "AmazonLinuxInstanceZoneA", "Ref" : "AmazonLinuxIntanceZoneB"]
          }
        }
        State: 'ENABLED'
        Targets:
          -
            Arn: !GetAtt CleanUpdLambdaFunction.Arn
            Id: !Ref CleanUpdLambdaFunction

Outputs:
    ALBHostName:
        Description: 'Application Load Balancer Hostnamee'
        Value:
          !GetAtt ApplicationLoadBalancer.DNSName

